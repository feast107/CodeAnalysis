<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System;
                         using System.Linq;
                         """;
    const string Type = "global::System.Type";
    const string TypeInfo = "global::Feast.CodeAnalysis.Utils.TypeInfo";
    const string ISymbol = "global::Microsoft.CodeAnalysis.ISymbol";
    const string ITypeSymbol = "global::Microsoft.CodeAnalysis.ITypeSymbol";
    const string INamespaceSymbol = "global::Microsoft.CodeAnalysis.INamespaceSymbol";
    const string ImmutableArrayBuilder = "global::Microsoft.CodeAnalysis.ImmutableArrayBuilder";
    const string SpecialType = "global::Microsoft.CodeAnalysis.SpecialType";
    const string ClassName = "ITypeSymbol";
    const string Char = "global::System.Char";
    const string Bool = "global::System.Boolean";
    const string String = "global::System.String";
    
    var methods = new List<(string name,Func<string, string> text)>
    {
        ("HasFullyQualifiedMetadataName",
            x => $$"""
              /// <summary>
              /// Checks whether or not a given type symbol has a specified fully qualified metadata name.
              /// </summary>
              /// <param name="symbol">The input <see cref="ITypeSymbol"/> instance to check.</param>
              /// <param name="name">The full name to check.</param>
              /// <returns>Whether <paramref name="symbol"/> has a full name equals to <paramref name="name"/>.</returns>
              public static {{Bool}} {{x}}(this {{ITypeSymbol}} symbol, {{String}} name)
              {
                  using {{ImmutableArrayBuilder}}<{{Char}}> builder = {{ImmutableArrayBuilder}}<{{Char}}>.Rent();
              
                  symbol.AppendFullyQualifiedMetadataName(in builder);
              
                  return builder.WrittenSpan.SequenceEqual(name.AsSpan());
              }
              """),
        ("AppendFullyQualifiedMetadataName",
            x => $$"""
              /// <summary>
              /// Appends the fully qualified metadata name for a given symbol to a target builder.
              /// </summary>
              /// <param name="symbol">The input <see cref="ITypeSymbol"/> instance.</param>
              /// <param name="builder">The target <see cref="ImmutableArrayBuilder{T}"/> instance.</param>
              private static void {{x}}(this {{ITypeSymbol}} symbol, 
                  in {{ImmutableArrayBuilder}}<{{Char}}> builder)
              {
                  static void BuildFrom({{ISymbol}}? symbol, in {{ImmutableArrayBuilder}}<{{Char}}> builder)
                  {
                      switch (symbol)
                      {
                          // Namespaces that are nested also append a leading '.'
                          case {{INamespaceSymbol}} { ContainingNamespace.IsGlobalNamespace: false }:
                              BuildFrom(symbol.ContainingNamespace, in builder);
                              builder.Add('.');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Other namespaces (ie. the one right before global) skip the leading '.'
                          case {{INamespaceSymbol}} { IsGlobalNamespace: false }:
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Types with no namespace just have their metadata name directly written
                          case {{ITypeSymbol}} { ContainingSymbol: {{INamespaceSymbol}} { IsGlobalNamespace: true } }:
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Types with a containing non-global namespace also append a leading '.'
                          case {{ITypeSymbol}} { ContainingSymbol: {{INamespaceSymbol}} namespaceSymbol }:
                              BuildFrom(namespaceSymbol, in builder);
                              builder.Add('.');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Nested types append a leading '+'
                          case {{ITypeSymbol}} { ContainingSymbol: {{ITypeSymbol}} typeSymbol }:
                              BuildFrom(typeSymbol, in builder);
                              builder.Add('+');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
                          default:
                              break;
                      }
                  }
              
                  BuildFrom(symbol, in builder);
              }
              """),
        ("IsAssignableTo",
            x =>
                $$"""
                 public static bool {{x}}(this {{ITypeSymbol}} symbol, {{Type}} type) => symbol.ToTypeInfo().IsAssignableTo(type);
                 
                 public static bool {{x}}(this {{Type}} type, {{ITypeSymbol}} symbol) => symbol.ToTypeInfo().IsAssignableFrom(type);
                 """),
        ("IsAssignableFrom",
            x =>
                $$"""
                 public static bool {{x}}(this {{Type}} type, {{ITypeSymbol}} symbol) => symbol.ToTypeInfo().IsAssignableTo(type);
                 
                 public static bool {{x}}(this {{ITypeSymbol}} symbol, {{Type}} type) => symbol.ToTypeInfo().IsAssignableTo(type);
                 """),
        ("ToTypeInfo",
            x => $$"""
                 public static {{TypeInfo}} {{x}}(this {{ITypeSymbol}} symbol) => {{TypeInfo}}.FromSymbol(symbol);
                 """),
        ("IsJsonBool",
            x=>$$"""
                 public static bool {{x}}(this {{ITypeSymbol}} symbol) => 
                     symbol.SpecialType == {{SpecialType}}.System_Boolean;
                 """),
        ("IsJsonNumber",
            x=>$$"""
                     public static bool {{x}}(this {{ITypeSymbol}} symbol) =>
                     symbol is { SpecialType: >= {{SpecialType}}.System_SByte and <= {{SpecialType}}.System_Single };
                     
                     """),
        ("IsJsonString",
            x=>$$"""
                 public static bool {{x}}(this {{ITypeSymbol}} symbol) =>
                     symbol.SpecialType is {{SpecialType}}.System_String or {{SpecialType}}.System_Char;
                 """
            )
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text(name).Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}