<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System.Linq;
                         """;
    const string Enum = "global::System.Enum";
    const string Type = "global::System.Type";
    const string Array = "global::System.Array";
    const string TypedConstant = "global::Microsoft.CodeAnalysis.TypedConstant";
    const string TypedConstantKind = "global::Microsoft.CodeAnalysis.TypedConstantKind";
    const string INamedTypeSymbol = "global::Microsoft.CodeAnalysis.INamedTypeSymbol";
    const string ArgumentException = "global::System.ArgumentException";
    const string ClassName = "TypedConstant";
    
    var methods = new List<(string name,Func<string,string> text)>
    {
        ("GetElementType",
            x=>$$"""
            private static {{Type}} GetElementType(this {{Type}} type)
            {
                return type.IsArray ? type.GetElementType()! : throw new {{ArgumentException}}("type is not an array");
            }
            """),
        ("GenericList",
            x=>$$"""
            internal static object GenericList(this {{Type}} type, params object[] values)
            {
                var listType = type.MakeGenericType(type.GetGenericArguments());
                var list = global::System.Activator.CreateInstance(listType);
                var add = listType.GetMethod(nameof(global::System.Collections.Generic.List<object>.Add))!;
                foreach(var value in values)
                {
                    add.Invoke(list, new object[] { value });
                }
                return list;
            }
           
            private static object ToArray(object genericList)
            {
                var toArray = genericList.GetType().GetMethod(nameof(global::System.Collections.Generic.List<object>.ToArray))!;
                return toArray.Invoke(genericList, null);
            }
            """),
        ("GetArgumentValue",
            x=>$$"""
            public static object? {{x}}(this {{TypedConstant}} constant)
            {
                return constant.Kind switch
                {
                    {{TypedConstantKind}}.Array => constant.Values.Select(x => x.GetArgumentValue()).ToArray(),
                    {{TypedConstantKind}}.Error => null,
                    _                                                      => constant.Value
                };
            }
            
            public static object? GetArgumentValue(this {{TypedConstant}} constant, {{Type}} type)
            {
                var value = constant.GetArgumentValue();
                if (!type.IsArray)
                {
                    if (type.IsEnum)
                    {
                        return value == null ? null : global::System.Enum.ToObject(type, (int)value);
                    }
            
                    return value;
                }
            
                if (value is not object[] arr) throw new global::System.ArgumentException("constant is not an array");
                var ret = global::System.Array.CreateInstance(type, arr.Length);
                global::System.Array.Copy(arr, ret, arr.Length);
                return ret;
            }
            """),
        ("GetArgumentType",
            x=>$$"""
            public static {{INamedTypeSymbol}}? {{x}}(this {{TypedConstant}} constant)
            {
                return constant.Kind == {{TypedConstantKind}}.Type ? constant.Value as {{INamedTypeSymbol}} : throw new {{ArgumentException}}("constant is not a type");
            }
            """),
        ("GetArgumentString",
            x=>$$"""
            public static string? {{x}}(this {{TypedConstant}} constant)
            {
                return constant.Kind == {{TypedConstantKind}}.Primitive ? constant.Value as string : throw new {{ArgumentException}}("constant is not a string");
            }
            """),
        ("GetArgumentEnum",
            x=>$$"""
            public static T? {{x}}<T>(this {{TypedConstant}} constant) where T : {{Enum}}
            {
                return constant.Kind == {{TypedConstantKind}}.Enum ? (T?)constant.Value : throw new {{ArgumentException}}("constant is not an enum");
            }
            """),
        ("GetArgumentPrimitive",
            x=>$$"""
            public static T? {{x}}<T>(this {{TypedConstant}} constant) where T : struct
            {
                return constant.Kind == {{TypedConstantKind}}.Primitive ? (T?)constant.Value : throw new {{ArgumentException}}("constant is not a primitive");
            }
            """),
        ("GetArgumentArray",
            x=>$$"""
            public static T?[] {{x}}<T>(this {{TypedConstant}} constant)
            {
                return constant.Kind == {{TypedConstantKind}}.Array ? constant.Values.Select(x => (T?)x.Value).ToArray() : throw new {{ArgumentException}}("constant is not an array");
            }
            """),
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text(name).Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}