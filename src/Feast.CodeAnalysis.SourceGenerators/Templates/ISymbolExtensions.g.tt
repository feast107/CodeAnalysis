<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System.Linq;
                         """;
    const string ClassName = "ISymbol";
    const string String = "global::System.String";
    const string ISymbol = "global::Microsoft.CodeAnalysis.ISymbol";
    const string SyntaxKind = "global::Microsoft.CodeAnalysis.CSharp.SyntaxKind";
    const string IEnumerable = "global::System.Collections.Generic.IEnumerable";
    const string AttributeData = "global::Microsoft.CodeAnalysis.AttributeData";
    const string Accessibility = "global::Microsoft.CodeAnalysis.Accessibility";
    const string SymbolEqualityComparer = "global::Microsoft.CodeAnalysis.SymbolEqualityComparer";
    const string IPropertySymbol = "global::Microsoft.CodeAnalysis.IPropertySymbol";
    const string NotNullWhen = "global::System.Diagnostics.CodeAnalysis.NotNullWhen";
    var methods = new List<(string name,Func<string,string> text)>
    {
        ("Is",
            x=>$$"""
                 public static bool {{x}}(this {{ISymbol}} symbol, {{ISymbol}} other) => {{SymbolEqualityComparer}}.Default.Equals(symbol, other);
                 """),
        ("GetFullyQualifiedName",
            x=>$$"""
            public static {{String}} {{x}}(this {{ISymbol}} symbol)
            {
                return symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            }
            """),
        ("IsInitOnly",
            x=>$$"""
            public static bool {{x}}(this {{IPropertySymbol}} symbol)
            {
                return !symbol.IsReadOnly && symbol.SetMethod!.IsInitOnly;
            }
            """),
        ("GetSyntaxKind",
            x=>$$"""
            public static {{IEnumerable}}<{{SyntaxKind}}> {{x}}(this {{Accessibility}} accessibility)
            {
                switch (accessibility)
                {
                    case Accessibility.Public: 
                        yield return {{SyntaxKind}}.PublicKeyword;
                        yield break;
                    case Accessibility.Protected: 
                        yield return {{SyntaxKind}}.ProtectedKeyword;
                        yield break;
                    case Accessibility.Internal: 
                        yield return {{SyntaxKind}}.InternalKeyword;
                        yield break;
                    case Accessibility.Private: 
                        yield return {{SyntaxKind}}.PrivateKeyword;
                        yield break;
                    case Accessibility.ProtectedOrInternal: 
                        yield return {{SyntaxKind}}.ProtectedKeyword;
                        yield return {{SyntaxKind}}.InternalKeyword;
                        yield break;
                    default: 
                        throw new global::System.ArgumentOutOfRangeException(nameof(accessibility), accessibility, null);
                }
           
            }
            """),
        
        ("TryGetAttributeWithFullyQualifiedMetadataName",
            x=>$$"""
               #if !ROSLYN_4_3_1_OR_GREATER
               /// <summary>
               /// Tries to get an attribute with the specified fully qualified metadata name.
               /// </summary>
               /// <param name="symbol">The input <see cref="ISymbol"/> instance to check.</param>
               /// <param name="name">The attribute name to look for.</param>
               /// <param name="attributeData">The resulting attribute, if it was found.</param>
               /// <returns>Whether or not <paramref name="symbol"/> has an attribute with the specified name.</returns>
               public static bool {{x}}(this {{ISymbol}} symbol, 
                   {{String}} name, 
                   [{{NotNullWhen}}(true)] out {{AttributeData}}? attributeData)
               {
                   foreach (AttributeData attribute in symbol.GetAttributes())
                   {
                       if (attribute.AttributeClass?.HasFullyQualifiedMetadataName(name) == true)
                       {
                           attributeData = attribute;
               
                           return true;
                       }
                   }
               
                   attributeData = null;
               
                   return false;
               }
               #endif
               """)
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text(name).Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}