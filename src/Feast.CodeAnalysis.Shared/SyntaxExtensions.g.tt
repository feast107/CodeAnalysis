<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System.Linq;
                         """;
    const string String = "global::System.String";
    const string Bool = "global::System.Boolean";
    const string IEnumerable = "global::System.Collections.Generic.IEnumerable";
    const string SemanticModel = "global::Microsoft.CodeAnalysis.SemanticModel";
    const string SyntaxKind = "global::Microsoft.CodeAnalysis.CSharp.SyntaxKind";
    const string AttributeSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax";
    const string AttributeArgumentSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax";
    const string LiteralExpressionSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax";
    const string TypeDeclarationSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax";
    const string MemberDeclarationSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax";
    const string CompilationUnitSyntax = "global::Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax";
    const string CancellationToken = "global::System.Threading.CancellationToken";
    
    const string ClassName = "Syntax";
    var methods = new List<(string name,Func<string, string> text)>
    {
        ("GetAllAttributes",
            x => $$"""
            public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{CompilationUnitSyntax}} syntax)
            {
                return syntax.AttributeLists.SelectMany(attributeListSyntax => attributeListSyntax.Attributes);
            }
            
            public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{TypeDeclarationSyntax}} syntax)
            {
                return syntax.AttributeLists.SelectMany(attributeListSyntax => attributeListSyntax.Attributes);
            }
            
            public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{MemberDeclarationSyntax}} syntax)
            {
                return syntax.AttributeLists.SelectMany(attributeListSyntax => attributeListSyntax.Attributes);
            }
            """),
        ("GetSpecifiedAttributes",
            x => $$"""
              private static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{IEnumerable}}<{{AttributeSyntax}}> attributes, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName, 
                  {{CancellationToken}} cancellationToken = default ({{CancellationToken}}))
              {
                  foreach (var attributeSyntax in attributes)
                  {
                      if(cancellationToken.IsCancellationRequested)
                          yield break;
                      if (semanticModel.GetSymbolInfo(attributeSyntax, cancellationToken).Symbol is not IMethodSymbol attributeSymbol)
                          continue;
              
                      string attributeName = attributeSymbol.ContainingType.ToDisplayString();
              
                      if (attributeName == fullAttributeName)
                          yield return attributeSyntax;
                  }
              }
              
              public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{CompilationUnitSyntax}} syntax, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName, 
                  {{CancellationToken}} cancellationToken = default ({{CancellationToken}}))
              {
                    return syntax.GetAllAttributes().GetSpecifiedAttributes(semanticModel, fullAttributeName, cancellationToken);
              }
              
              public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{TypeDeclarationSyntax}} syntax, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName, 
                  {{CancellationToken}} cancellationToken = default ({{CancellationToken}}))
              {
                    return syntax.GetAllAttributes().GetSpecifiedAttributes(semanticModel, fullAttributeName, cancellationToken);
              }
              
              public static {{IEnumerable}}<{{AttributeSyntax}}> {{x}}(this {{MemberDeclarationSyntax}} syntax, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName, 
                  {{CancellationToken}} cancellationToken = default ({{CancellationToken}}))
              {
                    return syntax.GetAllAttributes().GetSpecifiedAttributes(semanticModel, fullAttributeName, cancellationToken);
              }
              """),
        ("GetSpecifiedAttribute",
            x => $$"""
              public static {{AttributeSyntax}}? {{x}}(this {{TypeDeclarationSyntax}} syntax, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName,
                  {{CancellationToken}} cancellationToken = default ({{CancellationToken}}))
              {
                  foreach (var attributeSyntax in syntax.GetSpecifiedAttributes(semanticModel, fullAttributeName, cancellationToken))
                  {
                      return attributeSyntax;
                  }
                  return null;
              }
              """),
        ("HasSpecifiedAttribute",
            x => $$"""
              public static {{Bool}} {{x}}(this {{TypeDeclarationSyntax}} syntax, 
                  {{SemanticModel}} semanticModel, 
                  {{String}} fullAttributeName)
              {
                  return syntax.GetSpecifiedAttribute(semanticModel, fullAttributeName) is not null;
              }
              """),
        ("GetArgumentString",
            x => $$"""
              public static {{String}}? {{x}}(this {{AttributeArgumentSyntax}} syntax)
              {
                  if (syntax.Expression is not {{LiteralExpressionSyntax}} literalExpressionSyntax) return null;
                  if (!literalExpressionSyntax.IsKind({{SyntaxKind}}.StringLiteralExpression)) return null;
                  return literalExpressionSyntax.Token.ValueText;
              }
              """),
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text(name).Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}