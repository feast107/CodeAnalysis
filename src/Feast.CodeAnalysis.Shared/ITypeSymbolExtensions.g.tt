<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System;
                         using System.Linq;
                         """;
    const string String = "global::System.String";
    const string ISymbol = "global::Microsoft.CodeAnalysis.ISymbol";
    const string ITypeSymbol = "global::Microsoft.CodeAnalysis.ITypeSymbol";
    const string ImmutableArrayBuilder = "global::Microsoft.CodeAnalysis.ImmutableArrayBuilder";
    const string Bool = "global::System.Boolean";
    const string Char = "global::System.Char";
    const string ClassName = "ITypeSymbol";
    var methods = new List<(string name,string text)>
    {
        ("HasFullyQualifiedMetadataName",
            $$"""
              /// <summary>
              /// Checks whether or not a given type symbol has a specified fully qualified metadata name.
              /// </summary>
              /// <param name="symbol">The input <see cref="ITypeSymbol"/> instance to check.</param>
              /// <param name="name">The full name to check.</param>
              /// <returns>Whether <paramref name="symbol"/> has a full name equals to <paramref name="name"/>.</returns>
              public static {{Bool}} HasFullyQualifiedMetadataName(this {{ITypeSymbol}} symbol, {{String}} name)
              {
                  using {{ImmutableArrayBuilder}}<{{Char}}> builder = {{ImmutableArrayBuilder}}<{{Char}}>.Rent();
              
                  symbol.AppendFullyQualifiedMetadataName(in builder);
              
                  return builder.WrittenSpan.SequenceEqual(name.AsSpan());
              }
              """),
        ("AppendFullyQualifiedMetadataName",
            $$"""
              /// <summary>
              /// Appends the fully qualified metadata name for a given symbol to a target builder.
              /// </summary>
              /// <param name="symbol">The input <see cref="ITypeSymbol"/> instance.</param>
              /// <param name="builder">The target <see cref="ImmutableArrayBuilder{T}"/> instance.</param>
              private static void AppendFullyQualifiedMetadataName(this {{ITypeSymbol}} symbol, 
                  in {{ImmutableArrayBuilder}}<{{Char}}> builder)
              {
                  static void BuildFrom({{ISymbol}}? symbol, in {{ImmutableArrayBuilder}}<{{Char}}> builder)
                  {
                      switch (symbol)
                      {
                          // Namespaces that are nested also append a leading '.'
                          case INamespaceSymbol { ContainingNamespace.IsGlobalNamespace: false }:
                              BuildFrom(symbol.ContainingNamespace, in builder);
                              builder.Add('.');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Other namespaces (ie. the one right before global) skip the leading '.'
                          case INamespaceSymbol { IsGlobalNamespace: false }:
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Types with no namespace just have their metadata name directly written
                          case ITypeSymbol { ContainingSymbol: INamespaceSymbol { IsGlobalNamespace: true } }:
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Types with a containing non-global namespace also append a leading '.'
                          case ITypeSymbol { ContainingSymbol: INamespaceSymbol namespaceSymbol }:
                              BuildFrom(namespaceSymbol, in builder);
                              builder.Add('.');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
              
                          // Nested types append a leading '+'
                          case ITypeSymbol { ContainingSymbol: ITypeSymbol typeSymbol }:
                              BuildFrom(typeSymbol, in builder);
                              builder.Add('+');
                              builder.AddRange(symbol.MetadataName.AsSpan());
                              break;
                          default:
                              break;
                      }
                  }
              
                  BuildFrom(symbol, in builder);
              }
              """)
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text.Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}