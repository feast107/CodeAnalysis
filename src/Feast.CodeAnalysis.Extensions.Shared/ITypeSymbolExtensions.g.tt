<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const string NameSpace = "Microsoft.CodeAnalysis";
    const string Using = """
                         using System.Linq;
                         """;
    const string String = "global::System.String";
    const string ISymbol = "global::Microsoft.CodeAnalysis.ISymbol";
    const string ITypeSymbol = "global::Microsoft.CodeAnalysis.ITypeSymbol";
    const string AttributeData = "global::Microsoft.CodeAnalysis.AttributeData";
    const string NotNullWhen = "global::System.Diagnostics.CodeAnalysis.NotNullWhen";
    const string ImmutableArrayBuilder = "global::Microsoft.CodeAnalysis.PooledObjects.ImmutableArrayBuilder";
    const string Bool = "global::System.Boolean";
    const string Char = "global::System.Char";
    const string ClassName = "ITypeSymbol";
    var methods = new List<(string name,string text)>
    {
        ("HasFullyQualifiedMetadataName",
            $$"""
              /// <summary>
              /// Checks whether or not a given type symbol has a specified fully qualified metadata name.
              /// </summary>
              /// <param name="symbol">The input <see cref="ITypeSymbol"/> instance to check.</param>
              /// <param name="name">The full name to check.</param>
              /// <returns>Whether <paramref name="symbol"/> has a full name equals to <paramref name="name"/>.</returns>
              public static {{Bool}} HasFullyQualifiedMetadataName(this {{ITypeSymbol}} symbol, {{String}} name)
              {
                  using {{ImmutableArrayBuilder}}<{{Char}}> builder = {{ImmutableArrayBuilder}}<{{Char}}>.Rent();
              
                  symbol.AppendFullyQualifiedMetadataName(in builder);
              
                  return builder.WrittenSpan.SequenceEqual(name.AsSpan());
              }
              """),
    };
#>
<#=Using#>
#nullable enable
namespace <#=NameSpace#>
{
    internal static class <#=ClassName#>Extensions
    {
<#foreach(var (name,text) in methods){#>
<#
      var target = text.Replace("\n", "\n        ");#>
        <#=target#>

	    internal const string <#=name#>Text =
        """
        
        <#=target#>
        """;

<#}#>
    }
}